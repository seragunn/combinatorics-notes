{
  "hash": "4d69d6e61239adcade0882b46402fe9f",
  "result": {
    "engine": "jupyter",
    "markdown": "# Transfer Matrix Method\n\nLet $D$ be a directed graph on the vertices $1, \\dots, n$. The **adjacency matrix** of $D$ is the matrix $A = A(D)$ where\n$$\nA_{ij} = \\begin{cases}\n1 & \\text{if } i \\to j \\text{ is a directed edge}, \\\\\n0 & \\text{otherwise}\n\\end{cases}\n$$\n\nThese adjacency matrices allow for loop edges $i \\to i$ and can be made to allow for parallel edges if we let $A_{ij}$ be the number of parallel edges from $i \\to j$.\n\n## Example\n\nConsider the graph\n\n\n```{dot}\n//| label: fig-digraph\n//| fig-cap: A digraph on 1,2,3 with edges 12, 13, 22, 31, 32\n//| fig-width: 3\n//| fig-height: 2\ndigraph {\n    layout=neato\n    node [shape=circle] { 1 2 3 }\n    1 -> {2 3}\n    2 -> 2\n    3 -> {1 2}\n}\n```\n\n\n\nThe adjacency matrix of this digraph is\n$$\nA ={}\n\\begin{array}{c c}\n& \\begin{array}{@{} c c c @{}} 1 & 2 & 3 \\end{array} \\\\\n\\begin{array}{c} 1 \\\\ 2 \\\\ 3 \\end{array} \\hspace{-1em} &\n\\begin{pmatrix}\n0 & 1 & 1 \\\\\n0 & 1 & 0 \\\\\n1 & 1 & 0\n\\end{pmatrix} \\\\\n\\mbox{}\n\\end{array}\n$$ {#eq-adj-matrix}\n\nFor instance, row $1$ says that vertex $1$ has edges $1 \\to 2$ and $1 \\to 3$.\n\n## Matrix Multiplication\n\nIn linear algebra, we define the product of two matrices $A$ and $B$ by\n$$\n(AB)_{ij} = \\sum_t A_{it} B_{tj}.\n$$\n\nVisually, this means we take the $i$-th row of $A$ and take the dot product with the $j$-th row of $B$. For instance, if $A$ is the adjacency matrix in @eq-adj-matrix, then\n$$\nA_{12} = \\begin{pmatrix} 0 & 1 & 1 \\end{pmatrix} \\cdot \\begin{pmatrix} 1 \\\\ 1 \\\\ 1 \\end{pmatrix} = 0 \\cdot 1 + 1 \\cdot 1 + 1 \\cdot 1 = 2.\n$$\n\nThis product has a combinatorial meaning:\n$$\n(A^2)_{ij} = \\sum_t A_{it}A_{tj} = \\sum_t \\begin{cases}\n1 & \\text{if } i \\to t \\to j \\text{ are edges}, \\\\\n0 & \\text{else}.\n\\end{cases}\n$$\n\nIn other words: **$A^2$ gives the number of walks of length $2$.**\n\n::: {#thm-matrix-mult-walks}\nIf $A$ is the adjacency matrix for some digraph $D$, then $(A^n)_{ij}$ is the number of walks of length $n$ from $i$ to $j$.\n:::\n\n::: {.proof}\nWe prove this by induction. First, the base case: if $n = 1$ then $(A^1)_{ij} = A_{ij}$ is by definition the number of walks (single edges) from $i$ to $j$.\n\nFor the inductive step, we assume that (for every $i$ and $j$) $(A^{n - 1})_{ij}$ counts the number of walks from $i$ to $j$ of length $n - 1$. Then\n$$\n(A^n)_{ij} = (A^{n - 1}A)_{ij} = \\sum_t (A^{n-1})_{it}A_{tj}.\n$$\nHere, the first factor, $(A^{n-1})_{it}$ counts the number of walks from $i$ to $t$ of length $n - 1$ and $A_{tj}$ is the number of edges from $t$ to $j$. So the whole term $(A^{n-1})_{it}A_{tj}$ counts the number of walks from $i$ to $t$ to $j$. So this is every walk of length $n$ from $i$ to $j$.\n:::\n\n### Example\n\nFor the digraph in @fig-digraph, how many walks are there of length $3$ from vertex $1$ to vertex $2$? We can do $1,2,2,2$; or $1,3,2,2$; or $1,3,1,2$. So there are $3$ walks of length $3$. Therefore, we expect that $A^3$ will have a $3$ in row $1$, column $2$. Let's use SageMath to check this.\n\n::: {.cell execution_count=1}\n``` {.sage .cell-code}\n%display latex\nA = Matrix([[0, 1, 1], [0, 1, 0], [1, 1, 0]])\nA^3\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=tex}\n$\\displaystyle \\left(\\begin{array}{rrr}\n0 & 3 & 1 \\\\\n0 & 1 & 0 \\\\\n1 & 3 & 0\n\\end{array}\\right)$\n```\n:::\n:::\n\n\nExamples of other things this matrix tells us: there are $0$ walks from $1$ to $1$ of length $3$; there is only $1$ walk of length $3$ from $1$ to $3$, namely $1,3,1,3$.\n\n## Generating Functions {#sec-transfer-ogf}\n\nRecall that when we started with generating functions, a monomial like $ax^n$ meant \"$a$ objects of length or size $n$.\" So if we do $A^nx^n$ then the entries will represent \"$(A^n)_{ij}$ walks of length $n$.\" Then the generating function for this is\n\\begin{align*}\nM &= A^0x^0 + A^1x^1 + A^2x^2 + A^3x^3 + \\cdots \\\\\n&= I + Ax + A^2x^2 + A^3x^3 + \\cdots \\\\\n&= (I - Ax)^{-1}\n\\end{align*}\n\nWhere we use a similar formula as our geometric series, $\\frac{1}{1-ax}$, except $a$ is now a matrix.\n\nFor the digraph in @fig-digraph, this generating function is\n\n::: {.cell execution_count=2}\n``` {.sage .cell-code}\nM = (identity_matrix(3) - A*x)^-1\nM.simplify_rational()\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=tex}\n$\\displaystyle \\left(\\begin{array}{rrr}\n-\\frac{1}{x^{2} - 1} & \\frac{x}{x^{2} - 2 \\, x + 1} & -\\frac{x}{x^{2} - 1} \\\\\n0 & -\\frac{1}{x - 1} & 0 \\\\\n-\\frac{x}{x^{2} - 1} & \\frac{x}{x^{2} - 2 \\, x + 1} & -\\frac{1}{x^{2} - 1}\n\\end{array}\\right)$\n```\n:::\n:::\n\n\n::: {#thm-matrix-transfer-method}\nEach entry $M_{ij}$ of this matrix is the generating function for the number of walks from vertex $i$ to vertex $j$.\n:::\n\nFor instance, the generating function for walks from vertex $1$ to vertex $3$ is\n$$\n\\frac{x}{1 - x^2} = x + x^3 + x^5 + x^7 + \\cdots.\n$$\nThis agrees with what we can see from the diagram: there is exactly one walk of length $n$ for any odd number $n$ and none of even length.\n\nOf course, the true utility of this is when we can't do the calculation in our heads of the number of walks. For instance, the number of walks from vertex $1$ to vertex $2$ of length $n$ is given by the generating function\n$$\n\\frac{x}{1 - 2x + x^2} = \\frac{x}{(1 - x)^2} = \\sum_{n = 0}^\\infty nx^n\n$$\n(using the formula from @sec-sb-ogf-summary). So there are $n$ walks of length $n$.\n\n## Fibonacci\n\nWe can use this method to simplify a lot of the work we had to do with state elimination. Have a look at our Fibonacci automaton again, simplified down to $2$ states.\n\n\n\n```{mermaid}\n%%| label: fig-fibonacci-simple\n%%| fig-cap: \"FSA for binary strings with no 11, no sink state\"\nstateDiagram\n    direction LR\n\n    0 --> 0 : 0\n    0 --> 1 : 1\n    1 --> 0 : 0\n```\n\n\n\nA valid string is a walk from vertex $0$ to either vertex $0$ or vertex $1$ (depending on the last bit of the string). So we want $M_{00} + M_{01}$ for the number of walks from vertex $0$ to vertex $0$ plus from vertex $0$ to vertex $1$.\n\nHere's how to accomplish that in SageMath. We start with the adjacency matrix\n\n$$\nA = \\begin{pmatrix}\n1 & 1 \\\\\n1 & 0\n\\end{pmatrix}\n$$\n\nThen compute $M = (I - A)^{-1}$\n\n::: {.cell execution_count=3}\n``` {.sage .cell-code}\nA = Matrix([[1, 1], [1, 0]])\nI = identity_matrix(2)\nM = (I - A*x)^-1\nOGF = M[0][0] + M[0][1]\nOGF.simplify_rational()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=tex}\n$\\displaystyle -\\frac{x + 1}{x^{2} + x - 1}$\n```\n:::\n:::\n\n\nAnd this matches our answer in @sec-fib-put-together.\n\n## Recurrence Relations\n\nWith all this matrix algebra, the results we get can get pretty gnarly. Sometimes it's enough to get a recurrence relation to describe our answer. By @sec-OGF-to-recursive-formula, we know that the recurrence is given by the denominator.\n\nWe will use now a [theorem from linear algebra](https://en.wikipedia.org/wiki/Invertible_matrix#In_relation_to_its_adjugate).\n::: {#thm-matrix-inverse}\nThe inverse of a matrix $A$ is given by\n$$\nA^{-1} = \\frac{1}{\\det A} \\operatorname{Adj}(A)\n$$\nwhere the adjugate matrix $\\operatorname{Adj}(A)$ has entries given by determinants of $A$ deleting one row and one column.\n:::\n\nWhat's important to us here is that the denominator is $\\det A$. So the denominator of our generating functions is\n$$\n\\det(I - A*x)\n$$\n\nThis is related to the characteristic polynomial but with the coefficients reversed.\n\n### Example\n\nFor our Fibonacci FSA in @fig-fibonacci-simple, the denominator is\n\n::: {.cell execution_count=4}\n``` {.sage .cell-code}\ndet(I - A*x)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=tex}\n$\\displaystyle -x^{2} - x + 1$\n```\n:::\n:::\n\n\nThis tells us the recurrence relation is\n$$\n\\begin{array}{cccc}\n1 & -1 x & -1 x^2 & \\\\\n\\downarrow & \\downarrow & \\downarrow & \\\\\na_n & - a_{n - 1} & - a_{n - 2} & = 0\n\\end{array}\n$$\n\n::: {.callout-note}\nIn @sec-transfer-ogf, we saw that some of the denominators were $1 - x^2 = (1 - x)(1 + x)$ and some were $1 - x$ and some were $(1 - x)^2$. The denominator we calculate using $\\det(I - A*x)$ is $(1 - x)^2(1 + x) = 1 - x - x^2 + x^3$ leading to the recurrence $a_n - a_{n - 1} - a_{n - 2} + a_{n - 3}$.\n\nAll of the quantities will satisfy the longer recurrence but they also individually satisfy a shorter recurrence which may be different from their siblings.\n:::\n\n",
    "supporting": [
      "transfer-matrix_files/figure-pdf"
    ],
    "filters": []
  }
}