{
  "hash": "2951356a5709d4bb2750aafb8f2d93de",
  "result": {
    "engine": "jupyter",
    "markdown": "# Putting Everything Together\n\nWe've done some examples where we take a description and create a finite state automaton. We've done state elimination to create regular expressions. So let's look one last time at how to turn these regular expressions into formulae.\n\n## Trinary Example\n\nIn @sec-trinary-FSA, we had the regular expression\n$$\n0^*[1(0 + 1)^*2 + 2(0 + 2)^*1](0 + 1 + 2)^*.\n$$\n\nNow we could break this into sublanguages like $L_0 = \\{0\\}$ and $\\Phi_{L_0} = x^{f(0)} = x^1$ but we can streamline this a bit.\n\n1. Take your regular expression.\n2. Replace each character like $0, 1, 2$ with $x^{f(0)}, x^{f(1)}, x^{f(2)}$. If we're weighting by length these should all just be $x$.\n3. Replace $A^*$ by $\\frac{1}{1 - A}$.\n\nLet's illustrate:\n\\begin{align*}\n&\\phantom{{}={}}\\; 0^*[1(0 + 1)^*2 + 2(0 + 2)^*1](0 + 1 + 2)^* \\\\\n&\\mapsto x^*[x(x + x)^*x + x(x + x)^*x](x + x + x)^* \\\\\n&= x^*[2x^2(2x)^*](3x)^* \\\\\n&= \\frac{1}{1 - x}\\frac{2x^2}{1 - 2x}\\frac{1}{1 - 3x} \\\\\n&= \\frac{2x^2}{(1 - x)(1 -  2x)(1 - 3x)}.\n\\end{align*}\n\n### Getting a formula\nOn it's face, it's hard to tell what the taylor series is for this function. So we first ask Sage to give us a partial fraction decomposition.\n\n::: {#4f418b24 .cell execution_count=1}\n``` {.sage .cell-code}\n%display latex\nA = 2x^2 / ((1 - x)*(1 - 2x)*(1 - 3x))\nA.partial_fraction()\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<html>\\(\\displaystyle -\\frac{1}{3 \\, x - 1} + \\frac{2}{2 \\, x - 1} - \\frac{1}{x - 1}\\)</html>\n```\n:::\n:::\n\n\nSage typically puts the $x$'s first but it's more useful to us to write this as\n$$\n\\frac{1}{1 - 3x} - \\frac{2}{1 - 2x} + \\frac{1}{1 - x}.\n$$\n\nWe use the important identity $\\frac{1}{1 - ax} = \\sum a^n x^n$ to convert this to\n$$\n\\sum_{n = 0}^\\infty 3^n x^n - 2 \\sum_{n = 0}^{\\infty} 2^n x^n + \\sum_{n = 0}^\\infty x^n = \\sum_{n = 0}^\\infty (3^n - 2 \\cdot 2^n + 1) x^n.\n$$\n\nConclusion: there are $3^n - 2 \\cdot 2^n + 1$ trinary strings of length $n$ with at least one $1$ and one $2$.\n\n::: {.callout-note}\nWe can also obtain this answer by Inclusion/Exclusion. Let $X$ denote the set of all trinary strings of length $n$. Let $A$ be strings with no $1$ and let $B$ be strings with no $2$. Then $|X| = 3^n$ and $|A| = |B| = 2^n$ since each represents strings with two choices of character.\n\nWe want $|X| - |A \\cup B| = |X| - |A| - |B| + |A \\cap B|$ using the formula we had in @sec-avoiding. So $3^n - 2^n - 2^n + 1$ which matches what we have using generating functions.\n:::\n\nWe're beginning to see how generating functions tie together our material on binomial coefficients, strings, inclusion/exclusion and also recurrence relations.\n\n## Fibonacci Example\n\nAt the end of @sec-fibonacci-FSA, we had the regular expression $(0 + 10)^*(\\varepsilon + 1)$. We repeat our method to turn this into a generating function. First, we should point out that $\\varepsilon$ will become $x^{f(\\varepsilon)} = x^0 = 1$. So\n$$\n(x + x^2)^*(1 + x) = \\frac{1 + x}{1 - x - x^2}.\n$$\n\nPartial fractions don't help us out here. At least...not easily.\n\nOn the other hand, we know that the Fibonacci numbers satisfy the recurrence $f_n = f_{n - 1} + f_{n - 2}$. To make the connection clearer, let us write this as\n\n$$\nf_n - f_{n - 1} - f_{n - 2}.\n$$\n\n## More Examples\n\nConsider the sequence generated by $a_0 = 0, a_1 = 0, a_2 = 1$ and $a_n + 4a_{n - 1} - 2a_{n - 2} + 5a_{n - 3}$ for $n \\ge 3$.\n\nWe can compute a generating function $\\sum a_n x^n$ in Sage [using the following commands](https://doc.sagemath.org/html/en/reference/combinat/sage/rings/cfinite_sequence.html#sage-rings-cfinite-sequence).\n\n:::{.callout-note}\nPer the Sage documentation, the coefficients are given in ascending order (from $n - 3$ to $n - 2$ to $n - 1$):\n$$\na_{n + 3} = -5 a_n + 2 a_{n + 1} - 4 a_{n + 2}.\n$$\n:::\n\n::: {#cfb6ec1d .cell execution_count=2}\n``` {.sage .cell-code}\nC = CFiniteSequences(ZZ) # sequences over the integers\nC.from_recurrence([-5, 2, -4], [0, 0, 1]).ogf()\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<html>\\(\\displaystyle \\frac{x^{2}}{5x^{3} - 2x^{2} + 4x + 1}\\)</html>\n```\n:::\n:::\n\n\nThe numerator is hard to predict as it depends on the initial values as well as the recurrence. But pay attention to that denominator:\n$$\n1 + 4x - 2x^2 + 5x^3\n$$\n\nThese coefficients match our recurrence!\n\n## General Result\n\nSuppose a Taylor series $\\sum a_n x^n$ can be written as a rational function $P(x)/Q(x)$ where:\n\n1. $\\deg P < \\deg Q$\n2. $Q(x) = c_0 + c_1x + c_2x^2 + \\dots + c_kx^k$ (degree $k$)\n\nThen the coefficients $a_n$ satisfy the recurrence relation\n\n$$\nc_0 a_n + c_1 a_{n - 1} + c_2 a_{n - 2} + \\dots + c_k a_{n - k} = 0, \\text{ for } n \\ge k\n$$\n\n(And the reverse holds as well!)\n\n::: {.callout-note}\nThe condition that $\\deg P < \\deg Q$ isn't crucial to this. It takes care of a few things. First, if $\\deg P \\ge \\deg Q$ we could do long division to simplify.\n\nSecond, if we have something like $x/ (1 - x) = -1 + 1/(1 - x)$, then the recurrence relation we get from the denominator is $a_n = a_{n - 1}$ but if we write down this Taylor series, the coefficients are $0, 1, 1, 1, 1, \\dots$. So the recurence relation $a_n = a_{n - 1}$ only holds if $n \\ge 2$.\n\nThe big takeaway here is: making $\\deg P \\ge \\deg Q$ alters the initial terms and the recurrence relation takes longer to kick in.\n:::\n\n:::{.proof}\nLet $A = \\sum a_n x^n = P(x) / Q(x)$. Multiplying both sides by $Q(x)$ we should find that $AQ = P$ (a polynomial). So\n\\begin{align*}\nAQ &= (c_0 + c_1x + \\dots + c_kx^k) \\sum a_n x^n \\\\\n&= c_0 \\sum a_n x^n + c_1 \\sum a_nx^{n + 1} + \\dots + c_k \\sum a_n x^{n + k} \\\\\n&= c_0 \\sum a_n x^n + c_1 \\sum a_{n - 1}x^n + \\dots + c_k \\sum a_{n - k} x^n.\n\\end{align*}\n\nNow this is supposed to be a polynomial. And it is, if and only if the coefficients are $0$ for $n$ bigger than $\\deg P$ and in particular if $n \\ge k = \\deg Q$. So for $n \\ge k$, we have\n$$\nc_0 a_n + c_1 a_{n - 1} + \\dots + c_k a_{n - k}.\n$$\n\nAnd the steps here are reversible: if we satisfy this recurrence then $AQ$ is a polynomial of degree less than $k$.\n:::\n\n## Epilogue\n\nWhen our generating function comes apart nicely into partial fractions, we can use the identity $\\frac{1}{1 - ax} = \\sum a^n x^n$ to extract the coefficient of $a^n$. More generally, we can handle generating functions like $1 / (1 - ax)^k$ using the formulas of @sec-sb-ogf-summary.\n\nFor something like $x / (1 - x - x^2)$, partial fractions *can* be used to obtain \n$$\n\\frac{x}{1 - x - x^2} = \\frac1{\\sqrt5} \\left( \\frac{1}{1 - \\phi x} - \\frac{1}{1 - \\psi x} \\right); \\text{ where } \\phi, \\psi = \\frac{1 \\pm \\sqrt 5}{2}.\n$$\n\nWith the resulting formula\n$$\nf_n = \\frac{1}{\\sqrt 5}(\\phi^n -  \\psi^n).\n$$\nKnown as *Binet's formula* which we saw a version of in @sec-convergence. This formula is super cool but computationally leaves a lot to be desired as multiplying large decimal numbers together can be quite expensive.\n\nThe fastest way to compute the Fibonacci sequence comes right from the recurrence definition. With a little bit of linear algebra, we can turn that linear recurrence into\n$$\n\\begin{pmatrix}\n0 & 1 \\\\\n1 & 1\n\\end{pmatrix}\n\\begin{pmatrix}\nf_n \\\\\nf_{n + 1}\n\\end{pmatrix}\n=\n\\begin{pmatrix}\n0 f_n + f_{n + 1} \\\\\nf_n + f_{n + 1}\n\\end{pmatrix}\n=\n\\begin{pmatrix}\nf_{n + 1} \\\\\nf_{n + 2}\n\\end{pmatrix}.\n$$\n\nSo the Fibonacci numbers and in fact, all of these linear recurrence relations, can be computed via matrix multiplication. This has the immediate advantage that we can use the identity $A^{2n} = (A^n)^2$ to cut down our number of steps quite significantly. I.e. we have an algorithm where if $n$ has $k$ bits in binary, then the algorithm takes $\\mathcal O(k) = \\mathcal O(\\log_2 n)$ matrix multiplications.\n\n",
    "supporting": [
      "putting-it-together_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}