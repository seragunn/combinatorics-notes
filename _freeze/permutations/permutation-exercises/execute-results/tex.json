{
  "hash": "7605d551bf853d68e13864de0f3b4085",
  "result": {
    "engine": "jupyter",
    "markdown": "<script src=\"/js/permutations.js\"></script>\n<script>\n    function checkCycles(ans) {\n        return (input) => {\n            const ans_perm = new Permutation(ans);\n            const in_perm = new Permutation().parseCycles(input);\n            return in_perm.equals(ans_perm);\n        }\n    }\n    function checkCyclesFromInput(input_id) {\n        return (input) => {\n            const ans = document.getElementById(input_id).value;\n            const ans_perm = new Permutation().parseList(ans);\n            const in_perm = new Permutation().parseCycles(input);\n            return in_perm.equals(ans_perm);\n        }\n    }\n    function checkShuffle(ans) {\n        return (input) => {\n            const ans_perm = new Permutation(ans);\n            const in_perm = new Permutation().parseList(input);\n            return in_perm.equals(ans_perm);\n        }\n    }\n    function checkShuffleFromInput(input_id) {\n        return (input) => {\n            const ans = document.getElementById(input_id).value;\n            const ans_perm = new Permutation().parseCycles(ans);\n            const in_perm = new Permutation().parseList(input);\n            return in_perm.equals(ans_perm);\n        }\n    }\n    function checkProductofTranspositions(ans) {\n        return (input) => {\n            const ans_perm = new Permutation(ans);\n            const cycles = readCycles(input);\n            return cycles.every((c) => c.length == 2) && mulCycles(cycles).equals(ans_perm);\n        }\n    }\n    function checkProductofTranspositionsFromInput(input_id) {\n        return (input) => {\n            const ans = document.getElementById(input_id).value;\n            const ans_perm = new Permutation().parseCycles(ans);\n            const cycles = readCycles(input);\n            return cycles.every((c) => c.length == 2) && mulCycles(cycles).equals(ans_perm);\n        }\n    }\n    function checkSignFromInput(input_id) {\n        return (input) => {\n            const cycles = document.getElementById(input_id).value;\n            const ans = new Permutation().parseCycles(cycles).sign();\n            return input == ans;\n        }\n    }\n    function fillRandomShuffle(input_id, n) {\n        const p = randomPermutation(n);\n        document.getElementById(input_id).value = p.list;\n    }\n    function fillRandomCycles(input_id, n) {\n        const cycles = randomPermutation(n).cycles;\n        let str = \"\";\n        for(cycle of cycles) { str += \"(\" + cycle + \")\" }\n        document.getElementById(input_id).value = str;\n    }\n</script>\n\n# Exercises\n\n1. Convert $2, 12, 3, 5, 4, 9, 8, 7, 6, 10, 1, 11$ to a product of cycles and draw the associated digraph.\n\n::: {.cell execution_count=1}\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=tex}\n\\vspace{18pt}\n```\n:::\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n## Hint\nReference: @sec-cycle-decomposition\n\n* start with 1\n    * there is a 2 in position 1\n    * there is a 12 in position 2\n    * keep going...x in position 12...until you get back to 1\n* write down the first cycle $(1, 2, 12, \\dots)$ (don't repeat the $1$ at the end)\n* do the same procedure with the next number which hasn't been seen so far (i.e. 3)\n* keep going until every number is part of a cycle\n* optionally, throw away cycles of length 1\n:::\n\n2. Convert $(1,8,12)(2,3,6,7,9)(4,10,11)$ to a shuffle of $1,\\dots,12$\n\n::: {.cell execution_count=2}\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=tex}\n\\vspace{18pt}\n```\n:::\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n## Hint\nReference: @sec-cycle-multiplication\n\nSince the cycles are disjoint (don't share any numbers), the procedure here is:\n\n* look for each number from 1 to 12\n* write down the number following it in its cycle (e.g. 1 is followed by 8 so we write an 8 in the first position of the shufle, 2 is followed by 3, 3 by 6, etc.)\n* if a number does not appear (i.e. 5), then the perumtation leaves it unchanged and it remains in its starting position (so you should have a 5 in position 5 at the end)\n:::\n\n3. Show that $(12)(23)(34)(23)(12) = (14)$ by drawing the braid diagram.\n\n4. Compute the sign of the permutations in 1. and 2.\n\n::: {layout-ncol=2 .quiz-question-side-by-side}\n\n::: {.cell execution_count=3}\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=tex}\nProblem 1: $\\rule{2.54cm}{0.15mm}$\n\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=tex}\nProblem 2: $\\rule{2.54cm}{0.15mm}$\n\n```\n:::\n:::\n\n\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Hint\nReference: @sec-sign-algorithm\n\nRegardless of whether the cycles are disjoint or not (here they are), odd cycles are even and even cycles are odd (in terms of number of swaps). So multiply $1$ for each odd length cycle and $-1$ for each even legnth cycle. For example, $(1, 8, 2)$ has an odd legnth (even number of swaps) so we multiply $+1$ for it.\n:::\n\n5. Write $(182635)$ as a product of transpositions.\n\n::: {.cell execution_count=5}\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=tex}\n\\vspace{18pt}\n```\n:::\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n## Hint\nReference: @thm-product-of-transpositions\n\nThe rule is like $(a,b,c,d) = (a, b)(b, c)(c, d)$. The transpositions are adjacent pairs.\n:::\n\n::: {.content-visible when-format=html}\n### Additional practice {.unnumbered}\n\n::: panel-tabset\n\n### Shuffle to Cycles\n\n::: {.mx-2}\n<label for=\"n-shuffle\">n:</label>\n<input type=\"number\" id=\"n-shuffle\" value=\"10\">\n<input type=\"button\" id=\"shuffle-randomize\" value=\"Randomize\" onclick=\"fillRandomShuffle('shuffle-input', document.getElementById('n-shuffle').value)\">\n<br><br>\n<input id=\"shuffle-input\" class=\"form-control\" placeholder=\"Shuffle\">\n:::\n\n::: {.cell execution_count=6}\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=tex}\n\\vspace{18pt}\n```\n:::\n:::\n\n\n### Cycles to Shuffles\n\n::: {.mx-2}\n<label for=\"n-cycle\">n:</label>\n<input type=\"number\" id=\"n-cycle\" value=\"10\">\n<input type=\"button\" id=\"cycle-randomize\" value=\"Randomize\" onclick=\"fillRandomCycles('cycle-input', document.getElementById('n-cycle').value)\">\n<br><br>\n<input id=\"cycle-input\" class=\"form-control\" placeholder=\"Cycle decomposition\">\n:::\n\n::: {.cell execution_count=7}\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=tex}\n\\vspace{18pt}\n```\n:::\n:::\n\n\n### Sign\n::: {.mx-2}\n<label for=\"n-sign\">n:</label>\n<input type=\"number\" id=\"n-sign\" value=\"10\">\n<input type=\"button\" id=\"sign-randomize\" value=\"Randomize\" onclick=\"fillRandomCycles('sign-input', document.getElementById('n-sign').value)\">\n<br><br>\n<input id=\"sign-input\" class=\"form-control\" placeholder=\"Cycle decomposition\">\n:::\n\n::: {.cell execution_count=8}\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=tex}\n\\vspace{18pt}\n```\n:::\n:::\n\n\n### Transpositions\n::: {.mx-2}\n<label for=\"n-transpositions\">n:</label>\n<input type=\"number\" id=\"n-transpositions\" value=\"10\">\n<input type=\"button\" id=\"transpositions-randomize\" value=\"Randomize\" onclick=\"fillRandomCycles('transpositions-input', document.getElementById('n-transpositions').value)\">\n<br><br>\n<input id=\"transpositions-input\" class=\"form-control\" placeholder=\"Cycle decomposition\">\n:::\n\n::: {.cell execution_count=9}\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=tex}\n\\vspace{18pt}\n```\n:::\n:::\n\n\n:::\n:::\n\n<details>\n<summary>Solutions</summary>\n\n1. `(1, 2, 12, 11)(4, 5)(6, 9)(7, 8)`\n\n![](/i/digraph-exercise.png)\n\n2. `8, 3, 6, 10, 5, 7, 9, 12, 2, 11, 4, 1`\n3. ![](/i/braid-exercise.png)\n4. both even (+1)\n5. `(1, 8)(8, 2)(2, 6)(6, 3)(3, 5)`\n\n</details>\n\n",
    "supporting": [
      "permutation-exercises_files"
    ],
    "filters": []
  }
}