{
  "hash": "48c301efd75bb7050283311ddf2dffa0",
  "result": {
    "engine": "jupyter",
    "markdown": "# Visual representations of permutations\n\n## As a collection of cycles {#sec-cycle-decomposition}\n\nLet's look at a longer permutation now: $541237896$. As in @sec-function, we can view this as a function where $1$ goes to $5$, $2$ goes to $4$ etc. Following the path of a single number we get a cycle: $1$ goes to $5$ goes to $3$ goes to $1$. Likewise $2$ goes to $4$ goes to $2$. And so on.\n\nThe entire permutation can be broken up into cycles:\n\n\n\n::: {.cell execution_count=2}\n``` {.sage .cell-code}\nπ = Permutation([5,4,1,2,3,7,8,9,6])\nπ.to_digraph().plot(vertex_size=1500)\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n![](visual_files/figure-pdf/cell-3-output-1.png){fig-pos='H'}\n:::\n:::\n\n\n### Notation\n\nThe cycle $1 \\to 5 \\to 3 \\to 1$ can be written as $(153)$. In general, $(a_1,\\dots,a_n)$ represents the cycle $a_1 \\to a_2 \\to \\dots \\to a_n \\to a_1$. We often omit the commas when every number is a single digit.\n\nHere is how to compute the cycles in SageMath:\n\n::: {.cell execution_count=3}\n``` {.sage .cell-code}\nπ.cycle_string()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n'(1,5,3)(2,4)(6,7,8,9)'\n```\n:::\n:::\n\n\nThe answer is given as a product (i.e. composition) of cycles.\n\nElements which do not go anywhere---also called *fixed-points*---are represented by cycles of length $1$ E.g. $(123)(4)$ represents the two cycles $1 \\to 2 \\to 3 \\to 1$ and $4 \\to 4$. We often omit length $1$ cycles from the notation so $(123)(4) = (123)$ as a permutation of $1,2,3,4$.\n\n::: {#exr-cycle-decomposition}\n###\n\nCompute the cycle decomposition for $341859672$. You can [verify your answer in SageMath](https://sagecell.sagemath.org/).\n\n```python\nπ = Permutation([3,4,1,8,5,9,6,7,2])\nπ.cycle_string()\n```\n:::\n\nNote: as mentioned earlier: SageMath omits the cycle $(5)$ representing the fixed point $\\pi(5) = 5$.\n\n### Multiplying Cycles {#sec-cycle-multiplication}\n\nTo multiply cycles, we read from right to left. If our current number appears in the cycle, we shift over to the right (wrapping back to the start if necessary). E.g. $(2, 5)(1, 5, 3)$ would move $1$ to $5$ with the first cycle then from $5$ to $2$ with the second cycle.\n\nYou can either do this procedure and produce a shuffle like:\n\n|            $i$ | 1 | 2 | 3 | 4 | 5 |\n|----------------|---|---|---|---|---|\n| $(1, 5, 3)$    | 5 | - | 1 | - | 3 |\n| $(2, 5)$       | 2 | 5 | - | - | - |\n| Answer         | 2 | 5 | 1 | 4 | 3 |\n\nHere a \"-\" means the value is unchanged at this step.\n\nOr you can combine this with the procedure of @sec-cycle-decomposition and produce a product in cycle form again. Here that is $(1, 2, 5, 3)$ because $1 \\to 5 \\to 2$ then $2 \\to 5$ then $5 \\to 3$ then $3 \\to 1$.\n\n## Braids {#sec-braids}\n\n\n\nAnother visual representation used frequently in the mathematical study of knots is that of crossing lines. Let's look at an example:\n\n::: {.cell execution_count=5}\n``` {.sage .cell-code}\nB.<a,b> = BraidGroup(3)\nplot(a * b * a)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n![](visual_files/figure-pdf/cell-6-output-1.png){fig-pos='H'}\n:::\n:::\n\n\nThis represents a permutation where the first end ends up in the third position ($1 \\to 3$), the second end ends up in the second position ($2 \\to 2$) and the third end ends up in the first position ($3 \\to 1$). Overall, $1$ and $3$ are swapped, so this permutation is $(13)$.\n\n### Transpositions\nCycles of length $2$ are called *transpositions*. E.g. $(14)$ is a transposition which switches $1$ and $4$. The picture above represents a composition of $3$ transpositions $(13) = (12)(23)(12)$.\n\n::: {#thm-product-of-transpositions}\n### Product of transpositions\na) Every permutation can be written as a product of transpositions\nb) Every permutation can be written as a product of transpositions of adjacent elements.\n\nAnother way to say this is that by swapping pairs of elements at a time, we can obtain any possible shuffle.\n:::\n\n::: {.proof}\nWe know that a permutation may be written in terms of cycles. So if we can show that any cycle can be written as a successive sequence of swaps we are good. We will give a visual demonstration of this fact:\n\n::: {.cell execution_count=6}\n``` {.sage .cell-code}\nB.<t1,t2,t3,t4,t5> = BraidGroup(6)\nplot(t1 * t2 * t3 * t4 * t5)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n![](visual_files/figure-pdf/cell-7-output-1.png){fig-pos='H'}\n:::\n:::\n\n\nSo the cycle $(123456) = (12)(23)(34)(45)(56)$. Remember that compositions are read from right to left: e.g. $(f \\circ g)(i) = f(g(i))$ means first do $g$ then do $f$.\n\nThis kind of decomposition generalizes: you can replace $(123456)$ with any cycle of any length. E.g. $(1456) = (14)(45)(56)$:\n\n::: {.cell execution_count=7}\n``` {.sage .cell-code}\nsage.combinat.permutation.Permutations.options(mult='r2l', display='cycle')\nP = Permutation\nP((1,4)) * P((4,5)) * P((5,6))\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n(1,4,5,6)\n```\n:::\n:::\n\n\n:::\n\nFor an alternative proof, this decomposition into a sequence of adjacent swaps is exactly how the sorting algorithm BubbleSort works. We can sort any list using BubbleSort which does only adjacent swaps. So the shuffle is obtained by reversing those swaps to go from sorted to shuffled.\n\n### Braids versus permutations\n\nYou may have noticed in what we did, the word \"braid\" was used. Braids are similar to permutation except that we keep track of which strand goes above and which strand goes below. E.g. the transposition $(12)$ applied twice looks like\n\n::: {.cell execution_count=8}\n``` {.sage .cell-code}\nB.<a,b> = BraidGroup(3)\nplot(a * a)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n![](visual_files/figure-pdf/cell-9-output-1.png){fig-pos='H'}\n:::\n:::\n\n\nAs a permutation this is the trivial shuffle $123$. But as a braid it is still twisted.\n\nWhile we are only focused on permutations rather than braids here, we still make use of braids because SageMath is able to create diagrams for us.\n\n#### The Braid Group in SageMath\n\nThe generators of the braid group are adjacent swaps. So the line `B.<a, b> = BraidGroup(3)` sets `a` to a swap of $1, 2$ and sets `b` to a swap of $2, 3$. We can obtain the reverse swap with `a^-1` or `b^-1`\n\n::: {.cell execution_count=9}\n``` {.sage .cell-code}\nplot(a^-1 * a^-1)\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n![](visual_files/figure-pdf/cell-10-output-1.png){fig-pos='H'}\n:::\n:::\n\n\nWhen converting from braids to permutations, we ignore whether a strand goes over or under and just focus on the swapping.\n\n",
    "supporting": [
      "visual_files/figure-pdf"
    ],
    "filters": []
  }
}