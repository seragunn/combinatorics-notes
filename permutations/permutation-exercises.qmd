<script src="/js/permutations.js"></script>
<script>
    function checkCycles(ans) {
        return (input) => {
            const ans_perm = new Permutation(ans);
            const in_perm = new Permutation().parseCycles(input);
            return in_perm.equals(ans_perm);
        }
    }
    function checkCyclesFromInput(input_id) {
        return (input) => {
            const ans = document.getElementById(input_id).value;
            const ans_perm = new Permutation().parseList(ans);
            const in_perm = new Permutation().parseCycles(input);
            return in_perm.equals(ans_perm);
        }
    }
    function checkShuffle(ans) {
        return (input) => {
            const ans_perm = new Permutation(ans);
            const in_perm = new Permutation().parseList(input);
            return in_perm.equals(ans_perm);
        }
    }
    function checkShuffleFromInput(input_id) {
        return (input) => {
            const ans = document.getElementById(input_id).value;
            const ans_perm = new Permutation().parseCycles(ans);
            const in_perm = new Permutation().parseList(input);
            return in_perm.equals(ans_perm);
        }
    }
    function checkProductofTranspositions(ans) {
        return (input) => {
            const ans_perm = new Permutation(ans);
            const cycles = readCycles(input);
            return cycles.every((c) => c.length == 2) && mulCycles(cycles).equals(ans_perm);
        }
    }
    function checkProductofTranspositionsFromInput(input_id) {
        return (input) => {
            const ans = document.getElementById(input_id).value;
            const ans_perm = new Permutation().parseCycles(ans);
            const cycles = readCycles(input);
            return cycles.every((c) => c.length == 2) && mulCycles(cycles).equals(ans_perm);
        }
    }
    function checkSignFromInput(input_id) {
        return (input) => {
            const cycles = document.getElementById(input_id).value;
            const ans = new Permutation().parseCycles(cycles).sign();
            return input == ans;
        }
    }
    function fillRandomShuffle(input_id, n) {
        const p = randomPermutation(n);
        document.getElementById(input_id).value = p.list;
    }
    function fillRandomCycles(input_id, n) {
        const cycles = randomPermutation(n).cycles;
        let str = "";
        for(cycle of cycles) { str += "(" + cycle + ")" }
        document.getElementById(input_id).value = str;
    }
</script>

# Exercises

1. Convert $2, 12, 3, 5, 4, 9, 8, 7, 6, 10, 1, 11$ to a product of cycles and draw the associated digraph.

```{julia}
#| echo: false
using QuizQuestions

scriptq("checkCycles([2, 12, 3, 5, 4, 9, 8, 7, 6, 10, 1, 11])", placeholder="Check your work")
```

::: {.callout-tip collapse="true"}
## Hint
Reference: @sec-cycle-decomposition

* start with 1
    * there is a 2 in position 1
    * there is a 12 in position 2
    * keep going...x in position 12...until you get back to 1
* write down the first cycle $(1, 2, 12, \dots)$ (don't repeat the $1$ at the end)
* do the same procedure with the next number which hasn't been seen so far (i.e. 3)
* keep going until every number is part of a cycle
* optionally, throw away cycles of length 1
:::

2. Convert $(1,8,12)(2,3,6,7,9)(4,10,11)$ to a shuffle of $1,\dots,12$

```{julia}
#| echo: false
scriptq("checkShuffle([[1,8,12],[2,3,6,7,9],[4,10,11]])", placeholder="Check your work")
```

::: {.callout-tip collapse="true"}
## Hint
Reference: @sec-cycle-multiplication

Since the cycles are disjoint (don't share any numbers), the procedure here is:

* look for each number from 1 to 12
* write down the number following it in its cycle (e.g. 1 is followed by 8 so we write an 8 in the first position of the shufle, 2 is followed by 3, 3 by 6, etc.)
* if a number does not appear (i.e. 5), then the perumtation leaves it unchanged and it remains in its starting position (so you should have a 5 in position 5 at the end)
:::

3. Show that $(12)(23)(34)(23)(12) = (14)$ by drawing the braid diagram.

4. Compute the sign of the permutations in 1. and 2.

::: {layout-ncol=2 .quiz-question-side-by-side}
```{julia}
#| echo: false
fillblankq("Problem 1: ____", ("1","-1"), 1)
```
```{julia}
#| echo: false
fillblankq("Problem 2: ____", ("1","-1"), 1)
```
:::

::: {.callout-tip collapse="true"}
## Hint
Reference: @sec-sign-algorithm

Regardless of whether the cycles are disjoint or not (here they are), odd cycles are even and even cycles are odd (in terms of number of swaps). So multiply $1$ for each odd length cycle and $-1$ for each even legnth cycle. For example, $(1, 8, 2)$ has an odd legnth (even number of swaps) so we multiply $+1$ for it.
:::

5. Write $(182635)$ as a product of transpositions.

```{julia}
#| echo: false
scriptq("checkProductofTranspositions([[1,8,2,6,3,5]])", placeholder="Check your work")
```

::: {.callout-tip collapse="true"}
## Hint
Reference: @thm-product-of-transpositions

The rule is like $(a,b,c,d) = (a, b)(b, c)(c, d)$. The transpositions are adjacent pairs.
:::

::: {.content-visible when-format=html}
### Additional practice {.unnumbered}

::: panel-tabset

### Shuffle to Cycles

::: {.mx-2}
<label for="n-shuffle">n:</label>
<input type="number" id="n-shuffle" value="10">
<input type="button" id="shuffle-randomize" value="Randomize" onclick="fillRandomShuffle('shuffle-input', document.getElementById('n-shuffle').value)">
<br><br>
<input id="shuffle-input" class="form-control" placeholder="Shuffle">
:::

```{julia}
#| echo: false
scriptq("checkCyclesFromInput('shuffle-input')", placeholder="Check your work")
```

### Cycles to Shuffles

::: {.mx-2}
<label for="n-cycle">n:</label>
<input type="number" id="n-cycle" value="10">
<input type="button" id="cycle-randomize" value="Randomize" onclick="fillRandomCycles('cycle-input', document.getElementById('n-cycle').value)">
<br><br>
<input id="cycle-input" class="form-control" placeholder="Cycle decomposition">
:::

```{julia}
#| echo: false
scriptq("checkShuffleFromInput('cycle-input')", placeholder="Check your work")
```

### Sign
::: {.mx-2}
<label for="n-sign">n:</label>
<input type="number" id="n-sign" value="10">
<input type="button" id="sign-randomize" value="Randomize" onclick="fillRandomCycles('sign-input', document.getElementById('n-sign').value)">
<br><br>
<input id="sign-input" class="form-control" placeholder="Cycle decomposition">
:::

```{julia}
#| echo: false
scriptq("checkSignFromInput('sign-input')", placeholder="Check your work")
```

### Transpositions
::: {.mx-2}
<label for="n-transpositions">n:</label>
<input type="number" id="n-transpositions" value="10">
<input type="button" id="transpositions-randomize" value="Randomize" onclick="fillRandomCycles('transpositions-input', document.getElementById('n-transpositions').value)">
<br><br>
<input id="transpositions-input" class="form-control" placeholder="Cycle decomposition">
:::

```{julia}
#| echo: false
scriptq("checkProductofTranspositionsFromInput('transpositions-input')", placeholder="Check your work")
```

:::
:::

<details>
<summary>Solutions</summary>

1. `(1, 2, 12, 11)(4, 5)(6, 9)(7, 8)`

![](/i/digraph-exercise.png)

2. `8, 3, 6, 10, 5, 7, 9, 12, 2, 11, 4, 1`
3. ![](/i/braid-exercise.png)
4. both even (+1)
5. `(1, 8)(8, 2)(2, 6)(6, 3)(3, 5)`

</details>
